SCREEN

Presumes control character Ctrl-a :



.screenrc - config file
screen -t E-Mail     2   mutt -y
screen -t mp3blaster 4   stuff "mp3blaster\015" # send an enter at the end
screen -t root       1   su -

config file for screen
screen  1 ./script/server
split
focus
resize 15
screen 2 til -f log/dev.log
focus
screen 3 bash startvim

screen -c file.cfg (inchid cu C-A (screen ) C-\ )
pt log pot opri cu C-a-s si dau drumul cu C-a-q




C-a "
 - select window from list

C-a '
 - give the window number to select window

bind/bindkey
bind -c demo 0 select 10
bind -c demo 1 select 11
...
bindkey "^B" command -c demo
bind - command -c demo
use:
 C-b 0 - selects windows 10
 C-a - 0 - selects windows 10

bindkey -k K1 select 11 -> F11 select window 1 - doesn't work on all terminals
bindkey "\024" mapdefault


CONFIGURE:


-T term
term term
 - set terminal

vbell off
 - beep off

-e ^Ww
escape ``
 - change command escape sequence 
 
-h nr linii in scrollback buffer
"C-a i" to view the current setting.
defscrollback num
 - Default size of the scrollback buffer. 
 - New window parameters are changed. Initial setting is 100.

scrollback num
 - Set the size of the scrollback buffer for the current windows to num lines.
 - Default - 100 lines. 

-S session 
sessionname [name]
 -Rename the current session: the  name shows up with the process-id prepended.
Caution: The $STY variables still has the old name.




windows
- List all windows on message line
- Uses  the message line to display a list of all the windows: '1 shell 2*shell'
number and the title
 `*' - current window
 `-' - previous window
 `$' - windows  that  are "logged  in"
 `(L)' - window has output logging turned on
 `&' - windows shared with other users
 `Z' - windows in the zombie state

background:
 `!' - window that has received a bell
 `@' - monitored and has had activity
 
If this list is too long to fit on the terminal's status line only the portion around the current window is displayed.


Hardstatus - statusbar

backtick id lifespan autorefresh cmd args...
backtick id   - delete the backtick command with id id
 - Program  the  backtick command with the numerical id id.  
 - The output of such a command is used for substitution of the "%`" string escape. 
 - Lifespan  is  the number of seconds the output is considered valid. 
   After this time, the command is run again if a corresponding string escape is encountered.
 - autorefresh - automatic refresh for caption and hardstatus strings (seconds).
  Only the last line of output is used for substitution.
 - If lifespan and autorefresh = zero, the backtick program is expected to stay in background and generate output once in a while.
   In this case, the command is executed right away  and screen stores the last line of output. 
   If a new line gets printed screen will automatically refresh the hardstatus or the captions.

hardstatus [on|off]
hardstatus [always]lastline|message|ignore [string]
hardstatus string [string]

activate hardstatus:
hardstatus alwayslastline

#change the hardstatus settings to give an window list at the bottom of the screen, with the time and date and with the current window highlighted:
hardstatus string '%{= mK}%-Lw%{= KW}%50>%n%f* %t%{= mK}%+Lw%< %{= kG}%-=%D %d %M %Y %c:%s%{-}'

the niceone machine name on the left:

hardstatus string '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{Y} %d/%m %{W}%c %{g}]'
hardstatus string '%{= kG}%H [%= %{w}%?%-Lw%?%{r}%n*%f%t%?(%u)%?%{w}%?%+Lw%?%?%= %{g}] %{Y}%c%{g}'

simple -used at work:
hardstatus string '%{= kG}%H %{Y}PROJECT%{g}[%{w}%-Lw%{r}%n*%f%t%?%u%?%{w}%+Lw%{g}%= ]%{y}%c'    - u adauga un '&' daca sunt mai multi useri pe o fereastra
  %      the escape character itself
  c      current time HH:MM in 24h format
  d      day number
  D      weekday name
  f      flags of the window
  H      hostname of the system
  m      month number
  M      month name
  n      window number
  s      seconds
  t      window title
  u      all other users on this window
  w      all window numbers and names. With '-'  quailifier:  up  to  the
         current  window;  with  '+'  qualifier: starting with the window
         after the current one. Prefix L - long names.
  W      all window numbers and names except the current one
  y      last two digits of the year number
  Y      full year number
  ?      the part to the next '%?' is displayed  only  if  a  '%'  escape
         inside the part expands to a non-empty string
  :      else part of '%?'
  {      attribute/color modifier string terminated by the next "}"
  `      Substitute with the output of a 'backtick' command.  The  length
         qualifier is misused to identify one of the commands.


hstatus status
- a 'status' string on the 'hardstatus'

lastmsg
-last message to harstatus line
-see commands "msgwait" and "msgminwait" for fine tuning.


In compile window:
!:sed -n s/.*Error.*/\007/p
  Sends  window  output  to  both,  the user and the sed command. The sed inserts an additional bell character (oct. 007) to the window output
seen by screen. This will cause "Bell in window x" messages, whenever the string "Error" appears in the window.



MONITORING:

C-a _ switches into the monitoring mode for 30 seconds of silence, which triggers a notification in xterm's status area.
silence [on|off|sec]
 - monitoring for silence
silencewait sec
 - set default silence timewait - default 15/30

monitor [on|off]
-on - monitor for activity
-if background - and activity - @ to the harstatus window and an activity message

activity message
- default - 'Activity in window %n'
- use %n to windows number



LOGGING:

C-a H
logfile filename
logfile flush secs
log [on|off]       Start/stop writing output of the current window


C-a h
hardcopy [-h] [file]
-Write currently display to a file (hardcopy.%n)
-h - dump also the contents of the scrollback buffer.

hardcopy_append on|off
-default off

hardcopydir directory
-Directory where hardcopy files will be placed.
-If unset hardcopys are dumped in screen's current working directory.



OTHER:

su user pass
- superuser - ask for password

login [on|off]
-Adds or removes the entry in the utmp database file for the current window.

source file - pana la 10 nested

bufferfile
C-a : bufferfile /etc/passwd             C-a < C-a ]             C-a : bufferfile
 
wall mess afiseaza mess in screen curent

number [n]
-Change the current windows number.
-If the given number 'n' is used by another window, windows exchange their numbers.

C-a {
C-a }       (history)     Copy and paste a previous (command) line.

exec [[fdpat] newcommand [args ...]]
-Run a unix subprocess (specified by an executable path newcommand and its optional arguments) in the current window.
-The flow of data between newcommands  stdin/stdout/stderr, the process started in window and screen  itself (window)
 is controlled by the filedescriptor pattern fdpat.
-This pattern is basically a three character sequence representing stdin, stdout and stderr of newcommand.
-(.) connects the file descriptor to screen.
-(!) causes the file descriptor to be connected to the application-process.
-(:) combines both. User input will go to newcommand unless newcommand receives the first process started  output
  (fdpats  first  character  is  `!' or `:') or a pipe symbol (|) is added (as a fourth character) to the end of fdpat.

!:sed -n s/.*Error.*/\007/p
  Sends  window  output  to  both,  the user and the sed command. The sed inserts an additional bell character (oct. 007) to the window output
seen by screen. This will cause "Bell in window x" messages, whenever the string "Error" appears in the window.



copy
-Enter  copy/scrollback mode. This allows you to copy text from the current window and its history into the paste buffer.
In this mode  a  vi like `full screen editor' is active:

-Movement keys:
  h, j, k, l move the cursor line by line or column by column.
  0,  ^  and  $  move to the leftmost column, to the first or last non whitespace character on the line.
  H, M and L move the cursor to the leftmost column of the top,  center or bottom line of the window.
  + and - positions one line up and down.
  G moves to the specified absolute line (default: end of buffer).
  | moves to the specified absolute column.
  w, b, e move the cursor word by word.
  B, E move the cursor WORD by WORD (as in vi).
  C-u  and  C-d  scroll  the display up/down by the specified amount of lines while preserving the cursor position.
  (Default: half  screen  full).
  C-b and C-f scroll the display up/down a full screen.
  g moves to the beginning of the buffer.
  % jumps to the specified percentage of the buffer.

-Note:
  Emacs style movement keys can be customized by a .screenrc command. (E.g. markkeys "h=^B:l=^F:$=^E") There is no simple method for a
 full emacs-style keymap, as this involves multi-character codes.

-Marking
  - space to set the first and/or second mark. - paste with C-a ]
  - Y and y used to mark one whole line or to mark from start of line.
  - W marks exactly one word.
-Repeat count:
  - These commands can be prefixed with a repeat count number: 0..9

-Example:  "C-a  C-[  H  10 j 5 Y" will copy lines 11 to 15 into the paste buffer.

Searching:
 - /? Vi-like search.
 - C-a s Emacs style incremental search forward.
 - C-r Emacs style reverse i-search.

Specials:
 - screen vs vi allow to yank rectangular blocks of text. Press c or C to set the left or right margin  respectively.
 - If no repeat count is given, both default to the current cursor position.
Example: 
  - Try this on a rather full text screen: "C-a [ M 20 l SPACE c 10 l 5 j C SPACE".
  - This moves one to the middle line of the screen, moves in 20 columns left, 
  marks the beginning of the paste buffer, sets the left column, moves 5 columns down, 
  sets the right column, and then marks the end of the paste buffer. 
  - Now try: "C-a [ M 20 l SPACE 10 l 5 j SPACE" and notice the difference in the amount of text copied.
  - J  joins lines. It toggles between 4 modes: lines separated by a newline character (012), 
  lines glued seamless, lines separated by a single whitespace and comma separated lines. 
  
  Note that you can prepend the newline character with a carriage return character, by issuing a "crlf on".

'v'  is  for all the vi users with ":set numbers" - it toggles the left margin between column 9 and 1. 
Press 'a' before the final space key to toggle in append mode. Thus the  contents  of the paste buffer will not be overwritten, but is appended to.
'A' toggles in append mode and sets a (second) mark.
'>' sets the (second) mark and writes the contents of the paste  buffer to the screen-exchange file (/tmp/screen-exchange per default) once copy-mode is finished.

This example demonstrates how to dump the whole  scrollback  buffer to that file: "C-A [ g SPACE G $ >".

C-g gives information about the current line and column.
'x'  exchanges  the first mark and the current cursor position. You can use this to adjust an already placed mark.

@ does nothing. Does not even exit copy mode.
All keys not described here exit copy mode.




STRING ESCAPES

    Screen provides an escape mechanism to insert information like the current time into messages
or file names. The escape character is '%' with one  exception: inside of a window's hardstatus 
'^%' ('^E') is used instead.

 Here is the full list of supported escapes:

  %      the escape character itself
  a      either 'am' or 'pm'
  A      either 'AM' or 'PM'
  c      current time HH:MM in 24h format
  C      current time HH:MM in 12h format
  d      day number
  D      weekday name
  f      flags of the window
  F      sets %? to true if the window has the focus
  h      hardstatus of the window
  H      hostname of the system
  l      current load of the system
  m      month number
  M      month name
  n      window number
  s      seconds
  t      window title
  u      all other users on this window
  w      all window numbers and names. With '-'  quailifier:  up  to  the
         current  window;  with  '+'  qualifier: starting with the window
         after the current one.
  W      all window numbers and names except the current one
  y      last two digits of the year number
  Y      full year number
  ?      the part to the next '%?' is displayed  only  if  a  '%'  escape
         inside the part expands to a non-empty string
  :      else part of '%?'
  =      pad  the  string to the display's width (like TeX's hfill). If a
         number is specified, pad  to  the  percentage  of  the  window's
         width.   A  '0'  qualifier  tells  screen to treat the number as
         absolute position.  You can specify to pad relative to the  last
         absolute  pad position by adding a '+' qualifier or to pad rela-
         tive to the right margin by using '-'. The padding truncates the
         string  if  the specified position lies before the current posi-
         tion. Add the 'L' qualifier to change this.
  <      same as '%=' but just do truncation, do not fill with spaces
  >      mark the current text position for  the  next  truncation.  When
         screen  needs  to do truncation, it tries to do it in a way that
         the marked position gets moved to the  specified  percentage  of
         the  output  area.  (The  area starts from the last absolute pad
         position and ends with the position specified by the  truncation
         operator.)  The 'L' qualifier tells screen to mark the truncated
         parts with '...'.
  {      attribute/color modifier string terminated by the next "}"
  `      Substitute with the output of a 'backtick' command.  The  length
         qualifier is misused to identify one of the commands.

  The  'c'  and 'C' escape may be qualified with a '0' to make screen use
  zero instead of space as fill character. The '0' qualifier  also  makes
  the  '='  escape use absolute positions. The 'n' and '=' escapes under-
  stand a length qualifier (e.g. '%3n'), 'D' and 'M' can be prefixed with
  'L'  to  generate long names, 'w' and 'W' also show the window flags if
  'L' is given.

  An attribute/color modifier is is used to change the attributes or  the
  color  settings.  Its  format  is "[attribute modifier] [color descrip-
  tion]". The attribute modifier must be prefixed by a change type  indi-
  cator  if  it  can  be  confused with a color desciption. The following
  change types are known:

  +      add the specified set to the current attributes
  -      remove the set from the current attributes
  !      invert the set in the current attributes
  =      change the current attributes to the specified set

  The attribute set can either be specified as a hexadecimal number or  a
  combination of the following letters:

  d      dim
  u      underline
  b      bold
  r      reverse
  s      standout
  B      blinking

  Colors are coded either as a hexadecimal number or two letters specify-
  ing the desired background and foreground color (in  that  order).  The
  following colors are known:

  k      black
  r      red
  g      green
  y      yellow
  b      blue
  m      magenta
  c      cyan
  w      white
  d      default color
  .      leave color unchanged

  The  capitalized  versions of the letter specify bright colors. You can
  also use the pseudo-color 'i' to set just the brightness and leave  the
  color unchanged.
  A  one digit/letter color description is treated as foreground or back-
  ground color dependant on the current attributes: if  reverse  mode  is
  set,  the  background color is changed instead of the foreground color.
  If you don't like this, prefix the color with a ".". If  you  want  the
  same behaviour for two-letter color descriptions, also prefix them with
  a ".".
  As a special case, "%{-}" restores the attributes and colors that  were
  set  before the last change was made (i.e. pops one level of the color-
  change stack).

  Examples:

  "G"    set color to bright green
  "+b r" use bold red
  "= yd" clear all attributes, write in default  color  on  yellow  background.
  %-Lw%{= BW}%50>%n%f* %t%{-}%+Lw%<
         The  available  windows centered at the current window and trun-
         cated to the available width. The current  window  is  displayed
         white  on  blue.   This can be used with "hardstatus alwayslast line".
  %?%F%{.R.}%?%3n %t%? [%h]%?
         The window number and title and the window's hardstatus, if  one
         is  set.  Also use a red background if this is the active focus.
         Useful for "caption string".





STUFF command

Key name          Termcap name    Command

       ______________________________________________________

       Cursor up             ku          stuff \033[A
                                         stuff \033OA    (A)
       Cursor down           kd          stuff \033[B
                                         stuff \033OB    (A)
       Cursor right          kr          stuff \033[C
                                         stuff \033OC    (A)
       Cursor left           kl          stuff \033[D
                                         stuff \033OD    (A)
       Function key 0        k0          stuff \033[10~
       Function key 1        k1          stuff \033OP
       Function key 2        k2          stuff \033OQ
       Function key 3        k3          stuff \033OR
       Function key 4        k4          stuff \033OS
       Function key 5        k5          stuff \033[15~
       Function key 6        k6          stuff \033[17~
       Function key 7        k7          stuff \033[18~
       Function key 8        k8          stuff \033[19~
       Function key 9        k9          stuff \033[20~
       Function key 10       k;          stuff \033[21~
       Function key 11       F1          stuff \033[23~
       Function key 12       F2          stuff \033[24~
       Home                  kh          stuff \033[1~
       End                   kH          stuff \033[4~
       Insert                kI          stuff \033[2~
       Delete                kD          stuff \033[3~
       Page up               kP          stuff \033[5~
       Page down             kN          stuff \033[6~
       Keypad 0              f0          stuff 0
                                         stuff \033Op    (A)
       Keypad 1              f1          stuff 1
                                         stuff \033Oq    (A)
       Keypad 2              f2          stuff 2
                                         stuff \033Or    (A)
       Keypad 3              f3          stuff 3
                                         stuff \033Os    (A)
       Keypad 4              f4          stuff 4
                                         stuff \033Ot    (A)
       Keypad 5              f5          stuff 5
                                         stuff \033Ou    (A)
       Keypad 6              f6          stuff 6
                                         stuff \033Ov    (A)
       Keypad 7              f7          stuff 7
                                         stuff \033Ow    (A)
       Keypad 8              f8          stuff 8
                                         stuff \033Ox    (A)
       Keypad 9              f9          stuff 9
                                         stuff \033Oy    (A)
       Keypad +              f+          stuff +
                                         stuff \033Ok    (A)
       Keypad -              f-          stuff -
                                         stuff \033Om    (A)
       Keypad *              f*          stuff *
                                         stuff \033Oj    (A)
       Keypad /              f/          stuff /
                                         stuff \033Oo    (A)
       Keypad =              fq          stuff =
                                         stuff \033OX    (A)
       Keypad .              f.          stuff .
                                         stuff \033On    (A)
       Keypad ,              f,          stuff ,
                                         stuff \033Ol    (A)
       Keypad enter          fe          stuff \015
                                         stuff \033OM    (A)









VIM


Window mode C-W
Diff mode
vimdiff or vi -d file, file ...

config default file: .vimrc
syntax on filetype 		or 		filetype indent on (plugin?)

.vimrc (Example)
syntax enable
set tabstop=2
set shiftwidth=2
set expandtab
( set hidden )

(:map <F2> :bnext ! <cr>
:imap ...
:colo peachpuff)

set foldmethod=syntax (indent) zo expand/zc contract ...z

.vimrc - for tags
set tags+=~/tags 
set tags+=~/src/tags
set autowrite  - autosave before :next :make


- colors for putty - works well with syntax CPP
 fg - 170/210/170
 bg - 0/0/70


Folding

zf{motion}
{Visual}zf
zF
:{range}fo[ld]
 - create fold by range - nr lines
 - only works when 'foldmethod' is "manual" or "marker"

zd
zD - recursiv
zE - all
 - delete a fold at cursor
 - only works when 'foldmethod' is "manual" or "marker"

zo
zO recursiv
 - open fold under cursor
zc
zC recursiv
 - close fold unde cursor
za/zA toggle 
zv - view cursor line - open necessary folds 
zx - Update folds, reset manualy folds
zM - close all folds
zR - open all folds
zj - down - next folds
zk - up - next fold

zn/zN open all folds/return as they were before
[z ]z - begin/end of current open fold


Prog:

:sh  :!command?	
 - exec a shell, exec command and give retcode
K
 - man for keyword under cursor
:make?
 - exec make, print errors,(goto first)
:cn  :cp	(?)
 - goto next error, prev
:cl  :cf  (?)
 - list errors from file 
^L ^G 
 - refresh screen, info session 
Gd   - go to definition 
g^G - file details related to cursor
*,# - goto next/prev 'string under cursor'
ga  - ascii code
gf  - open file under ursor
:redir>f - redir output to file f
:mkview [f]   - save config - set cfg
:loadview [f] -	load config - set cfg
:mksession ~/.vim/minesess - create session file (vim graphical config)
vim -S ~/.vim/minesess - load a session

vim file +30 - edit file from line 30
% - match paired (, [, {, comment, #define
set number - print line numbers

if we create a batch to launch vim we can configure it for a screen window in .screenrc
vim -S layout_ide.vim

Tags

:ta t - go to tag
:nta  - go to n tag
^] ^T - tag under cursor/back
:ts t - tag selection from list
:tj t - go to tag or select from is if many
:tags - print list of tags
:tl   - go to last used
^W}  :pt t - preview of curso tag, t
^W]   - split win and show cursor tag
^Wz or :pc - close preview win

^Ws ^Wv or :split :vsplit, :vs - split
^Wn or :new - new window
^Wo or :on  - big window (= all win equals)
^Whjkl   - go to window left, dn, up, right
^Ww ^W^W - go to backgrund/foreground window


EDIT

use ! - to force any command
:e f	- edit file
:wn wN - save and edit next/prev
:n N  - edit next/prev
:q    -	quit
:wq x - exit
:r f	- read file into
:r! cmd	- insert the cmd result at the cursor
:args	- argument list
%     - all file

, ;  - lines separator, first line
n	   - line number
. $  - current line, last line
% *  - all file, visual selection
't   - marker 't' position


hjkl  left,down,up,right
b w	 - word left, right
{ }  - pharagraph prec/next
( )  - phrase before/next
^  $ - line - first/last
n%   - %percent of doc
n|   - column n
%    - match paired (, [, {, comment, #define
nH nL- nlines from up/dn window
M    - middle screen
^E ^Y	- scroll line up/dn
^D ^U	- scroll half page up/dn
^F ^B	- scroll page forward/back
zt - line at top
zz - line to middle 
zb - line to bottom
gg/G - first/last line
`.  - go to the last line edited

mc - mark char a..Z
`c - go to mark
'c - go to beginig of the line where mark
:marks - affiche la liste des marques actives
:jumps - affiche la liste des sauts

iI - insert before/after cursor
aA, oO - append, overwrite
r  - replace letter
R  - replace from cursor
C  - replace to EOL
~  - change case 
n<< n>> - indent n characters

x X	- del char under/before cursor
dw/d- delete word/line
D   - delete to EOL
J gJ- join line /wihout spaces

"x    - registry for copy action
:reg  - print registers
ym    - copy text from cursor to ... mode word,^ begin,$end,`m `n-from m to n
yy or Y	- copy line
p P   - paste after/before current line
]p [p - with indent

u U	  - undo last, Undo all last
. ^R	- repeat the last command, redo

:se[t]     - Show different from default value
:se[t] all - Show all but terminal options
:se[t] termcap - All terminal options. not GUI
:se[t] {option}? - Show value of {option}.
:se[t] {option}		Toggle option: set, switch it on.
			Number option: show value.
			String option: show value.
:se[t] no{option}	Toggle option: Reset, switch it off.
:se[t] {option}&	Reset option to its default value.  
:se[t] {option}&vi	Reset option to its Vi default value. {not in Vi}
:se[t] {option}&vim	Reset option to its Vim default value. {not in Vi}
:se[t] all&		Set all options, except terminal options, to their default value.
	The values of 'term', 'lines' and	'columns' are not changed. {not in Vi}

Gvim
Visual selection, although common in applications today, is a key feature that 
differentiates vim from traditional vi.

To cut (or copy) and paste using visual selection:
1. Position the cursor at the beginning of the text you want to cut/copy.
2. Press v to begin character-based visual selection (or upper case V to select 
whole lines, or Ctrl-V for a vertical block).
3. Move the cursor to the end of the text to be cut/copied. (While selecting text, 
you can perform searches and other advanced movement, a feature that sets vim 
apart from most other editors.)
4. Press d (as in "delete") to cut, or y (as in "yank", which I imagine meaning 
"yank so hard and fast that it leaves a copy behind") to copy.
5. Move the cursor to the desired paste location.
6. Press p to paste after the cursor, or P to paste before.

In gvim, visual marking (steps 1-3) can be replaced by selecting text using a mouse 
or similar pointing device, although I strongly prefer to navigate using the keyboard.

Bonus tip: To replace the selected text with new text (to be entered by you), 
press 'c' instead of 'd' or 'p' on step 4.  This deletes the selection and leaves you 
in insert mode.  Then, instead of (or prior to) steps 5-6, type your replacement text.






CTAGS

ctags --c-types=f -f functions *.c

using vim
:vsplit functions

try to clean a litle: 
:setlocal ts=99

shortcut to select a tag??
 :nnoremap <buffer> <CR> 0ye<C-W>w:tag <C-R>"<CR>    - de verificat - functie de selectat in fer dreapta direct functia dupa tag

:tselect /^write_
ctrl-] - goto tag


ctags -R
vim -t 'myclass' (tag)


ctags --recurse --language-force=c++ --extra=+q --fields=+i *.cpp *.h

ctags -R  -h ".h.H.hh.hpp.hxx.h++" --language-force=c++ --extra=+q --fields=+i

pt taguri multiple
TAG cursor "g ctrl]
:ts tag or :tselect tag
:sts tag	- cu split


primul tag gasit
tag ctrl]
:ta tag or :tag tag
:sta tag - split next

ctrl t - back/last ?C-T?


.vimrc
set tags+=~/tags 
set tags+=~/src/tags
set autowrite  - autosave before :next :make
